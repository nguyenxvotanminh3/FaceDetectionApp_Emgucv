using System;
using System.Drawing;
using System.Windows.Forms;
using AForge.Video;
using AForge.Video.DirectShow;
using Emgu.CV;
using Emgu.CV.Dnn;
using Emgu.CV.Structure;

namespace FaceDetectionCamera
{
    public partial class Form1 : Form
    {
        private FilterInfoCollection filter;
        private VideoCaptureDevice device;
        private readonly CascadeClassifier cascadeClassifier;
        private bool blurFaces = false;
        private Net genderNet;
        private string[] genderList = new string[] { "Male", "Female" };
        public Form1()
        {
            InitializeComponent();
            cascadeClassifier = new CascadeClassifier("haarcascade_frontalface_default.xml");
            genderNet = DnnInvoke.ReadNetFromCaffe("deploy_gender.prototxt", "gender_net.caffemodel");
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            filter = new FilterInfoCollection(FilterCategory.VideoInputDevice);
            foreach (FilterInfo device in filter)
                cboDevice.Items.Add(device.Name);
            if (cboDevice.Items.Count > 0)
                cboDevice.SelectedIndex = 0;
        }

        private void btnDetect_Click(object sender, EventArgs e)
        {
            if (cboDevice.SelectedIndex >= 0)
            {
                device = new VideoCaptureDevice(filter[cboDevice.SelectedIndex].MonikerString);
                device.NewFrame += Device_NewFrame;
                device.Start();
            }
            else
            {
                MessageBox.Show("No video device selected.");
            }
        }

        private void Device_NewFrame(object sender, NewFrameEventArgs eventArgs)
        {
            Bitmap bitmap = (Bitmap)eventArgs.Frame.Clone();

            // Apply horizontal flip
            bitmap.RotateFlip(RotateFlipType.RotateNoneFlipX);

            // Calculate the new width and height for a centered crop
            int newWidth = bitmap.Width - 100;
            int newHeight = bitmap.Height / 2; // Crop to half the height (adjust as needed)

            // Define the rectangle for the cropped area (centered)
            int startX = (bitmap.Width - newWidth) / 2;
            int startY = 0;
            Rectangle cropRect = new Rectangle(startX, startY, newWidth, newHeight);

            // Crop the image
            Bitmap croppedBitmap = bitmap.Clone(cropRect, bitmap.PixelFormat);

            // Convert the cropped image to Image<Bgr, Byte> for face detection
            Image<Bgr, byte> grayImage = new Image<Bgr, byte>(croppedBitmap);

            // Detect faces
            Rectangle[] rectangles = cascadeClassifier.DetectMultiScale(grayImage, 1.1, 3, Size.Empty);

            using (Graphics g = Graphics.FromImage(croppedBitmap))
            {
                if (blurFaces)
                {
                    // Draw black rectangles over faces
                    foreach (Rectangle rect in rectangles)
                    {
                        using (Brush brush = new SolidBrush(Color.Black))
                        {
                            g.FillRectangle(brush, rect);
                        }
                    }
                }
                else
                {
                    // Draw rectangles around faces
                    foreach (Rectangle rect in rectangles)
                    {
                        using (Pen pen = new Pen(Color.Red, 2))
                        {
                            g.DrawRectangle(pen, rect);
                        }
                    }
                }
            }

            // Display the cropped image
            pic.Image = croppedBitmap;
        }

        private void btnBlur_Click(object sender, EventArgs e)
        {
            blurFaces = !blurFaces; // Toggle face blurring on or off
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            StopCamera();
        }

        private void StopCamera()
        {
            if (device != null && device.IsRunning)
            {
                device.SignalToStop();
                device.WaitForStop();
            }
        }

        private void InsertPicture_Click(object sender, EventArgs e)
        {
            StopCamera(); // Ensure the camera is stopped before inserting a picture

            using (OpenFileDialog ofd = new OpenFileDialog() { Multiselect = false, Filter = "JPEG|*.jpg" })
            {
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    pic.Image = Image.FromFile(ofd.FileName);
                    Bitmap bitmap = new Bitmap(pic.Image);
                    Image<Bgr, byte> grayImage = new Image<Bgr, byte>(bitmap);
                    Rectangle[] rectangles = cascadeClassifier.DetectMultiScale(grayImage, 1.1, 3, Size.Empty);
                    using (Graphics g = Graphics.FromImage(bitmap))
                    {
                        foreach (Rectangle rect in rectangles)
                        {
                            using (Pen pen = new Pen(Color.Red, 2))
                            {
                                g.DrawRectangle(pen, rect);
                            }
                        }
                    }
                    pic.Image = bitmap;
                }
            }
        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {
        }

        private void pictureBox2_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void button1_Click(object sender, EventArgs e)
        {

        }
    }
}
